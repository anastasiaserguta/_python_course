'''
Напишите декоратор cache, который кэширует результат вызова функции
(сохраняет в словаре).
Когда функция вызывается снова с теми же аргументами, декоратор должен возвращать результат из кэша, вместо того,
чтобы вызывать декорированную функцию.
'''

def add_cache(func): # Декоратор кэширования.
    cache = {}
    def wrapper(*args):
        nonlocal cache
        if cache.get(args): # Проверка наличия переданных параметров в кэше в качестве ключа.
            print('Выведено из кэша.')
            return cache[args] # Вывод значения из кэша в случае, если переданные параметры присутствуют в кэше в качестве ключей.
        else:
            print('Добавлено в кэш.') # Добавление значения в кэш при его отсутствии.
            cache[args] = func(*args) 
            return cache[args]
    return wrapper

@add_cache 
def power(num, pow):
    result = num ** pow
    return f'Число {num} в степени {pow} равно - {result}.'

for _ in range(10):
    print(power(int(input('Введите число: ')), int(input('Введите степень: '))))