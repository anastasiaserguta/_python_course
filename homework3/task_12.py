'''
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É - ‚Äú–ò–≥—Ä–∞ –ñ–∏–∑–Ω—å‚Äù –î–∂–æ–Ω–∞ –ö–æ–Ω–≤–µ—è.
–í –∏–≥—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Ç–∫–∞ —è—á–µ–µ–∫ NxN, –≥–¥–µ –∫–∞–∂–¥–∞—è —è—á–µ–π–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ –∂–∏–≤–æ–π, –ª–∏–±–æ –º–µ—Ä—Ç–≤–æ–π. –ò–≥—Ä–∞ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –ø–æ —à–∞–≥–∞–º (–ø–æ–∫–æ–ª–µ–Ω–∏—è–º) –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª.

–ü—Ä–∞–≤–∏–ª–∞:
1. –ñ–∏–≤–∞—è –∫–ª–µ—Ç–∫–∞, –∏–º–µ—é—â–∞—è < 2 –∂–∏–≤—ã—Ö —Å–æ—Å–µ–¥–µ–π, –ø–æ–≥–∏–±–∞–µ—Ç.
2. –ñ–∏–≤–∞—è –∫–ª–µ—Ç–∫–∞ —Å 2-3 –∂–∏–≤—ã–º–∏ —Å–æ—Å–µ–¥—è–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.
3. –ñ–∏–≤–∞—è –∫–ª–µ—Ç–∫–∞, —É –∫–æ—Ç–æ—Ä–æ–π > 3 –∂–∏–≤—ã—Ö —Å–æ—Å–µ–¥–µ–π, –ø–æ–≥–∏–±–∞–µ—Ç.
4. –ú–µ—Ä—Ç–≤–∞—è –∫–ª–µ—Ç–∫–∞, –∏–º–µ—é—â–∞—è 3 –∂–∏–≤—ã—Ö —Å–æ—Å–µ–¥–∞, —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∂–∏–≤–æ–π –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ N.
2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —á–∏—Å–ª–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π (—à–∞–≥–æ–≤) M.
3. –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥–∞—è —è—á–µ–π–∫–∞ –ª–∏–±–æ –∂–∏–≤–∞, –ª–∏–±–æ –º–µ—Ä—Ç–≤–∞.
4. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ–Ω—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –ø–æ–∫–æ–ª–µ–Ω–∏–π M –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–∞–∂–¥–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω.

–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:
–í —ç—Ç–æ–π –∑–∞–¥–∞—á–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ª—é–±—ã–µ —É–ª—É—á—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∂—É—Ç—Å—è –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏ —ç—Ç–æ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞.
1. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.
2. –°–µ—Ç–∫–∞ –≤ –∏–≥—Ä–µ - —ç—Ç–æ –ø–æ —Å—É—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤.
3. –î–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è –ø–æ–≤–µ—Ä—Ö —Å—Ç–∞—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—á–∏—Å—Ç–∫—É —Ç–µ—Ä–º–∏–Ω–∞–ª–∞. –ö–∞–∫? Google it üôÇ
4. –î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏, —á–∏—Å–ª–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π) –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏–±–æ input(), –ª–∏–±–æ –º–æ–¥—É–ª—å argparse (import argparse) –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
5. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è (–≤—Ä–µ–º—è, –≤ —Ç–µ—á–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ) –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –∫—Å—Ç–∞—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –° —ç—Ç–∏–º –≤–∞–º –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ñ—É–Ω–∫—Ü–∏—è sleep() –∏–∑ –º–æ–¥—É–ª—è time
(import time).
'''

from os import system, name
from random import shuffle, randrange
from time import sleep
from copy import deepcopy

print('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–ñ–∏–∑–Ω—å"!')
print('–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?')
user_name = input('–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ')
print(f'–¢–µ–ø–µ—Ä—å, {user_name}, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ –¥–ª—è –∏–≥—Ä—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è —Å–º–µ–Ω—ã –ø–æ–∫–æ–ª–µ–Ω–∏–π.')
size = int(input('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–±–æ–ª—å—à–µ 8) –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å–µ—Ç–∫–∏ N x N: '))
step = int(input(f'–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è —Å–º–µ–Ω—ã –ø–æ–∫–æ–ª–µ–Ω–∏–π –Ω–∞ —Å–µ—Ç–∫–µ —Ä–∞–∑–º–µ—Ä–æ–º {size} x {size}: '))
step_start = step
total_step = 0


dead_cell = '-' # –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—É—Å—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫.
live_cell = 'x' # –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è –ø–æ–∫–æ–ª–µ–Ω–∏–π.
playing_field = [] # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
playing_field_copy = []
old_gen = [] # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–≤—É—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π.
counter_live_cell = [] # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫.
start_gen = 0

def field_generator(size, step): # –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –∏–≥—Ä—ã - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π.
    global playing_field_copy, old_gen, total_step
    if name == 'nt':
        system('cls')
    else:
        system('clear')

    print(f'{step}#' * size)
    for row_first_gen in range(size):
        for col_first_gen in range(size):
            print(playing_field[row_first_gen][col_first_gen], end = ' ')
        print()
    sleep(0.7)
    step -= 1

    playing_field_copy = deepcopy(playing_field)

    while step > 0 and playing_field not in old_gen:
        total_step += 1
        old_gen.append(playing_field_copy)
        if name == 'nt':
            system('cls')
        else:
            system('clear')

        for row in range(size):
            for col in range(size):
                counter_live_cell = []

                if playing_field_copy[row][col] == live_cell: # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∂–∏–≤–æ–π –∫–ª–µ—Ç–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.

                    if row == 0 and col == 0: # [0, 0]
                        counter_live_cell.append(playing_field_copy[row + 1][col])
                        counter_live_cell.append(playing_field_copy[row + 1][col + 1])
                        counter_live_cell.append(playing_field_copy[row][col + 1])
                        if counter_live_cell.count(live_cell) not in [2, 3]:
                            playing_field[row][col] = dead_cell

                    elif row == 0 and col == size - 1: # [0, 5]
                        counter_live_cell.append(playing_field_copy[row][col - 1])
                        counter_live_cell.append(playing_field_copy[row + 1][col - 1])
                        counter_live_cell.append(playing_field_copy[row + 1][col])
                        if counter_live_cell.count(live_cell) not in [2, 3]:
                            playing_field[row][col] = dead_cell

                    elif row == size - 1 and col == 0: # [5, 0]
                        counter_live_cell.append(playing_field_copy[row - 1][col])
                        counter_live_cell.append(playing_field_copy[row - 1][col + 1])
                        counter_live_cell.append(playing_field_copy[row][col + 1])
                        if counter_live_cell.count(live_cell) not in [2, 3]:
                            playing_field[row][col] = dead_cell

                    elif row == size - 1 and col == size - 1: # [5, 5]
                        counter_live_cell.append(playing_field_copy[row][col - 1])
                        counter_live_cell.append(playing_field_copy[row - 1][col - 1])
                        counter_live_cell.append(playing_field_copy[row - 1][col])
                        if counter_live_cell.count(live_cell) not in [2, 3]:
                            playing_field[row][col] = dead_cell

                    elif col == 0 and row not in [0, size - 1]: # [(1, 2, 3, 4), 0]
                        counter_live_cell.append(playing_field_copy[row + 1][col])
                        counter_live_cell.append(playing_field_copy[row + 1][col + 1])
                        counter_live_cell.append(playing_field_copy[row][col + 1])
                        counter_live_cell.append(playing_field_copy[row - 1][col + 1])
                        counter_live_cell.append(playing_field_copy[row - 1][col])
                        if counter_live_cell.count(live_cell) not in [2, 3]:
                            playing_field[row][col] = dead_cell

                    elif col == size - 1 and row not in [0, size - 1]: # [(1, 2, 3, 4), 5]
                        counter_live_cell.append(playing_field_copy[row - 1][col])
                        counter_live_cell.append(playing_field_copy[row - 1][col - 1])
                        counter_live_cell.append(playing_field_copy[row][col - 1])
                        counter_live_cell.append(playing_field_copy[row + 1][col - 1])
                        counter_live_cell.append(playing_field_copy[row + 1][col])
                        if counter_live_cell.count(live_cell) not in [2, 3]:
                            playing_field[row][col] = dead_cell

                    elif row == 0 and col not in [0, size - 1]: # [0, (1, 2, 3, 4)]
                        counter_live_cell.append(playing_field_copy[row][col - 1])
                        counter_live_cell.append(playing_field_copy[row + 1][col - 1])
                        counter_live_cell.append(playing_field_copy[row + 1][col])
                        counter_live_cell.append(playing_field_copy[row + 1][col + 1])
                        counter_live_cell.append(playing_field_copy[row][col + 1])
                        if counter_live_cell.count(live_cell) not in [2, 3]:
                            playing_field[row][col] = dead_cell

                    elif row == size - 1 and col not in [0, size - 1]: # [5, (1, 2, 3, 4)]
                        counter_live_cell.append(playing_field_copy[row][col - 1])
                        counter_live_cell.append(playing_field_copy[row - 1][col - 1])
                        counter_live_cell.append(playing_field_copy[row - 1][col])
                        counter_live_cell.append(playing_field_copy[row - 1][col + 1])
                        counter_live_cell.append(playing_field_copy[row][col + 1])
                        if counter_live_cell.count(live_cell) not in [2, 3]:
                            playing_field[row][col] = dead_cell

                    else: # [(1, 2, 3, 4), (1, 2, 3, 4)]
                        counter_live_cell.append(playing_field_copy[row - 1][col - 1])
                        counter_live_cell.append(playing_field_copy[row][col - 1])
                        counter_live_cell.append(playing_field_copy[row + 1][col - 1])
                        counter_live_cell.append(playing_field_copy[row + 1][col])
                        counter_live_cell.append(playing_field_copy[row + 1][col + 1])
                        counter_live_cell.append(playing_field_copy[row][col + 1])
                        counter_live_cell.append(playing_field_copy[row - 1][col + 1])
                        counter_live_cell.append(playing_field_copy[row - 1][col])
                        if counter_live_cell.count(live_cell) not in [2, 3]:
                            playing_field[row][col] = dead_cell

                else: # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–µ—Ä—Ç–≤–æ–π –∫–ª–µ—Ç–∫–∏.

                    if row == 0 and col == 0:
                        counter_live_cell.append(playing_field_copy[row + 1][col])
                        counter_live_cell.append(playing_field_copy[row + 1][col + 1])
                        counter_live_cell.append(playing_field_copy[row][col + 1])
                        if counter_live_cell.count(live_cell) == 3:
                            playing_field[row][col] = live_cell
                            
                    elif row == 0 and col == size - 1:
                        counter_live_cell.append(playing_field_copy[row][col - 1])
                        counter_live_cell.append(playing_field_copy[row + 1][col - 1])
                        counter_live_cell.append(playing_field_copy[row + 1][col])
                        if counter_live_cell.count(live_cell) == 3:
                            playing_field[row][col] = live_cell

                    elif row == size - 1 and col == 0:
                        counter_live_cell.append(playing_field_copy[row - 1][col])
                        counter_live_cell.append(playing_field_copy[row - 1][col + 1])
                        counter_live_cell.append(playing_field_copy[row][col + 1])
                        if counter_live_cell.count(live_cell) == 3:
                            playing_field[row][col] = live_cell

                    elif row == size - 1 and col == size - 1:
                        counter_live_cell.append(playing_field_copy[row][col - 1])
                        counter_live_cell.append(playing_field_copy[row - 1][col - 1])
                        counter_live_cell.append(playing_field_copy[row - 1][col])
                        if counter_live_cell.count(live_cell) == 3:
                            playing_field[row][col] = live_cell

                    elif col == 0 and row not in [0, size - 1]: # [(1, 2, 3, 4), 0]
                        counter_live_cell.append(playing_field_copy[row + 1][col])
                        counter_live_cell.append(playing_field_copy[row + 1][col + 1])
                        counter_live_cell.append(playing_field_copy[row][col + 1])
                        counter_live_cell.append(playing_field_copy[row - 1][col + 1])
                        counter_live_cell.append(playing_field_copy[row - 1][col])
                        if counter_live_cell.count(live_cell) == 3:
                            playing_field[row][col] = live_cell

                    elif col == size - 1 and row not in [0, size - 1]: # [(1, 2, 3, 4), 5]
                        counter_live_cell.append(playing_field_copy[row - 1][col])
                        counter_live_cell.append(playing_field_copy[row - 1][col - 1])
                        counter_live_cell.append(playing_field_copy[row][col - 1])
                        counter_live_cell.append(playing_field_copy[row + 1][col - 1])
                        counter_live_cell.append(playing_field_copy[row + 1][col])
                        if counter_live_cell.count(live_cell) == 3:
                            playing_field[row][col] = live_cell
                        
                    elif row == 0 and col not in [0, size - 1]: # [0, (1, 2, 3, 4)]
                        counter_live_cell.append(playing_field_copy[row][col - 1])
                        counter_live_cell.append(playing_field_copy[row + 1][col - 1])
                        counter_live_cell.append(playing_field_copy[row + 1][col])
                        counter_live_cell.append(playing_field_copy[row + 1][col + 1])
                        counter_live_cell.append(playing_field_copy[row][col + 1])
                        if counter_live_cell.count(live_cell) == 3:
                            playing_field[row][col] = live_cell

                    elif row == size - 1 and col not in [0, size - 1]: # [5, (1, 2, 3, 4)]
                        counter_live_cell.append(playing_field_copy[row][col - 1])
                        counter_live_cell.append(playing_field_copy[row - 1][col - 1])
                        counter_live_cell.append(playing_field_copy[row - 1][col])
                        counter_live_cell.append(playing_field_copy[row - 1][col + 1])
                        counter_live_cell.append(playing_field_copy[row][col + 1])
                        if counter_live_cell.count(live_cell) == 3:
                            playing_field[row][col] = live_cell

                    else:
                        counter_live_cell.append(playing_field_copy[row - 1][col - 1])
                        counter_live_cell.append(playing_field_copy[row][col - 1])
                        counter_live_cell.append(playing_field_copy[row + 1][col - 1])
                        counter_live_cell.append(playing_field_copy[row + 1][col])
                        counter_live_cell.append(playing_field_copy[row + 1][col + 1])
                        counter_live_cell.append(playing_field_copy[row][col + 1])
                        counter_live_cell.append(playing_field_copy[row - 1][col + 1])
                        counter_live_cell.append(playing_field_copy[row - 1][col])
                        if counter_live_cell.count(live_cell) == 3:
                            playing_field[row][col] = live_cell

        for row_next_gen in range(size):
            for col_next_gen in range(size):
                print(playing_field[row_next_gen][col_next_gen], end = ' ')
            print()

        sleep(0.7)

        playing_field_copy = deepcopy(playing_field)
        
        step -= 1
    
    return 'Stop'

if size < 8: # –£—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è. –î–ª—è —Å–≤–æ–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤—ã–±—Ä–∞–ª–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ 8 –∫–ª–µ—Ç–æ–∫.
    print(f'–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —á–∏—Å–ª–æ {size} –º–µ–Ω—å—à–µ 8!')
else:
    first_position_row = list(range(0, size)) # –í —É–∫–∞–∑–∞–Ω–Ω–æ–º –±–ª–æ–∫–µ –∫–æ–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è.
    first_position_column = list(range(0, size))
        
    playing_field = [[dead_cell] * size for _ in range(size)] # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ.
    
    while start_gen <= size:
        start_gen += 1
        shuffle(first_position_row)
        shuffle(first_position_column)
        for i in range(len(first_position_row)):
            playing_field[first_position_row[i]][first_position_column[i]] = live_cell # –†–∞–∑–º–µ—â–∞–µ–º –Ω–∞ –ø—É—Å—Ç–æ–º –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ –ø–æ–∫–æ–ª–µ–Ω–∏—è –ø–æ —Ä–∞–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.

    field_generator(size, step)

    print('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∫–æ–ª–µ–Ω–∏–π –æ–∫–æ–Ω—á–µ–Ω–∞.')

    if playing_field not in old_gen:
        print(f'–≠—Ç–æ –∫–æ–Ω–µ—á–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ —Ä–∞–∑–º–µ—Ä–æ–º {size} x {size} —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–∫–æ–ª–µ–Ω–∏–π, —Ä–∞–≤–Ω—ã—Ö {step_start} —à–∞–≥–∞–º.')
    else:
        print(f'–≠—Ç–æ –∫–æ–Ω–µ—á–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ —Ä–∞–∑–º–µ—Ä–æ–º {size} x {size} —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø–æ–∫–æ–ª–µ–Ω–∏–π. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {total_step} —à–∞–≥–µ (-–∞–º).')